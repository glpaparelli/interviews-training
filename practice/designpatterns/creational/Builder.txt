Builder was introduced to solve some of the problems with Factory and 
Abstract Factory when the object contains a lot of attributes. 

There are three major issues with Factory/Abstract-Factory when the object 
contains a lot of attributes or it is heavt to create: 
1) too many arguments to pass from client program to the Factory class that 
   can be error prone because most of the time, the type of arguments are the same
   and from client side its hard to maintain the order of the arguments
2) some of the parameters might be optional but in Factory pattern we are forced
   to send all the parameters and optional parameters need to send as NULL
3) if the object is heavy and its creation is complex, then all that complexity 
   will be part of Factory classes and that is confusing

We could solve the issues with large number of parameters by providing a constructor
with some required parameter and then different setter methods to set the optional
parameter. 
The problem with this approach is that the object state may be inconsistent since
until all of the setters are used. 

Builder solve the problem of the many parameters and the inconsistency of the object
by providing a way to build the object step-by-step and provide a method that will
actually return the final object.

- You have the complext object to create
- You make an helper (Builder) that builds the object step by step
- You use the helper to instantiate the Builder